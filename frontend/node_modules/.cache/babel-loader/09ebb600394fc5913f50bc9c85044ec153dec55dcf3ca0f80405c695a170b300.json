{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractPredictionsProvider } from './AbstractPredictionsProvider';\nimport { isIdentifyLabelsInput, isIdentifyEntitiesInput, isIdentifyTextInput } from '../Predictions';\nimport { Logger } from '@aws-amplify/core';\nvar logger = new Logger('AbstractIdentifyPredictionsProvider');\nvar AbstractIdentifyPredictionsProvider = /** @class */function (_super) {\n  __extends(AbstractIdentifyPredictionsProvider, _super);\n  function AbstractIdentifyPredictionsProvider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  AbstractIdentifyPredictionsProvider.prototype.getCategory = function () {\n    return 'Identify';\n  };\n  AbstractIdentifyPredictionsProvider.prototype.identify = function (input) {\n    if (isIdentifyTextInput(input)) {\n      logger.debug('identifyText');\n      return this.identifyText(input);\n    } else if (isIdentifyLabelsInput(input)) {\n      logger.debug('identifyLabels');\n      return this.identifyLabels(input);\n    } else if (isIdentifyEntitiesInput(input)) {\n      logger.debug('identifyEntities');\n      return this.identifyEntities(input);\n    }\n  };\n  AbstractIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n    throw new Error('identifyText is not implemented by this provider.');\n  };\n  AbstractIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n    throw new Error('identifyLabels is not implemented by this provider');\n  };\n  AbstractIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n    throw new Error('identifyEntities is not implemented by this provider');\n  };\n  return AbstractIdentifyPredictionsProvider;\n}(AbstractPredictionsProvider);\nexport { AbstractIdentifyPredictionsProvider };","map":{"version":3,"names":["AbstractPredictionsProvider","isIdentifyLabelsInput","isIdentifyEntitiesInput","isIdentifyTextInput","Logger","logger","AbstractIdentifyPredictionsProvider","_super","__extends","prototype","getCategory","identify","input","debug","identifyText","identifyLabels","identifyEntities","Error"],"sources":["/Users/andyzhang/Documents/GitHub/Full-stack-project-GuitarSaleWeb/frontend/node_modules/@aws-amplify/predictions/src/types/Providers/AbstractIdentifyPredictionsProvider.ts"],"sourcesContent":["import { AbstractPredictionsProvider } from './AbstractPredictionsProvider';\nimport {\n\tIdentifyLabelsInput,\n\tIdentifyEntitiesInput,\n\tisIdentifyLabelsInput,\n\tisIdentifyEntitiesInput,\n\tIdentifyTextInput,\n\tisIdentifyTextInput,\n\tIdentifyTextOutput,\n\tIdentifyLabelsOutput,\n\tIdentifyEntitiesOutput,\n} from '../Predictions';\nimport { Logger } from '@aws-amplify/core';\nconst logger = new Logger('AbstractIdentifyPredictionsProvider');\n\nexport abstract class AbstractIdentifyPredictionsProvider extends AbstractPredictionsProvider {\n\tgetCategory(): string {\n\t\treturn 'Identify';\n\t}\n\n\tidentify(\n\t\tinput: IdentifyTextInput | IdentifyLabelsInput | IdentifyEntitiesInput\n\t): Promise<\n\t\tIdentifyTextOutput | IdentifyLabelsOutput | IdentifyEntitiesOutput\n\t> {\n\t\tif (isIdentifyTextInput(input)) {\n\t\t\tlogger.debug('identifyText');\n\t\t\treturn this.identifyText(input);\n\t\t} else if (isIdentifyLabelsInput(input)) {\n\t\t\tlogger.debug('identifyLabels');\n\t\t\treturn this.identifyLabels(input);\n\t\t} else if (isIdentifyEntitiesInput(input)) {\n\t\t\tlogger.debug('identifyEntities');\n\t\t\treturn this.identifyEntities(input);\n\t\t}\n\t}\n\n\tprotected identifyText(\n\t\tinput: IdentifyTextInput\n\t): Promise<IdentifyTextOutput> {\n\t\tthrow new Error('identifyText is not implemented by this provider.');\n\t}\n\n\tprotected identifyLabels(\n\t\tinput: IdentifyLabelsInput\n\t): Promise<IdentifyLabelsOutput> {\n\t\tthrow new Error('identifyLabels is not implemented by this provider');\n\t}\n\n\tprotected identifyEntities(\n\t\tinput: IdentifyEntitiesInput\n\t): Promise<IdentifyEntitiesOutput> {\n\t\tthrow new Error('identifyEntities is not implemented by this provider');\n\t}\n}\n"],"mappings":";AAAA,SAASA,2BAA2B,QAAQ,+BAA+B;AAC3E,SAGCC,qBAAqB,EACrBC,uBAAuB,EAEvBC,mBAAmB,QAIb,gBAAgB;AACvB,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,IAAMC,MAAM,GAAG,IAAID,MAAM,CAAC,qCAAqC,CAAC;AAEhE,IAAAE,mCAAA,0BAAAC,MAAA;EAAkEC,SAAA,CAAAF,mCAAA,EAAAC,MAAA;EAAlE,SAAAD,oCAAA;;EAuCA;EAtCCA,mCAAA,CAAAG,SAAA,CAAAC,WAAW,GAAX;IACC,OAAO,UAAU;EAClB,CAAC;EAEDJ,mCAAA,CAAAG,SAAA,CAAAE,QAAQ,GAAR,UACCC,KAAsE;IAItE,IAAIT,mBAAmB,CAACS,KAAK,CAAC,EAAE;MAC/BP,MAAM,CAACQ,KAAK,CAAC,cAAc,CAAC;MAC5B,OAAO,IAAI,CAACC,YAAY,CAACF,KAAK,CAAC;KAC/B,MAAM,IAAIX,qBAAqB,CAACW,KAAK,CAAC,EAAE;MACxCP,MAAM,CAACQ,KAAK,CAAC,gBAAgB,CAAC;MAC9B,OAAO,IAAI,CAACE,cAAc,CAACH,KAAK,CAAC;KACjC,MAAM,IAAIV,uBAAuB,CAACU,KAAK,CAAC,EAAE;MAC1CP,MAAM,CAACQ,KAAK,CAAC,kBAAkB,CAAC;MAChC,OAAO,IAAI,CAACG,gBAAgB,CAACJ,KAAK,CAAC;;EAErC,CAAC;EAESN,mCAAA,CAAAG,SAAA,CAAAK,YAAY,GAAtB,UACCF,KAAwB;IAExB,MAAM,IAAIK,KAAK,CAAC,mDAAmD,CAAC;EACrE,CAAC;EAESX,mCAAA,CAAAG,SAAA,CAAAM,cAAc,GAAxB,UACCH,KAA0B;IAE1B,MAAM,IAAIK,KAAK,CAAC,oDAAoD,CAAC;EACtE,CAAC;EAESX,mCAAA,CAAAG,SAAA,CAAAO,gBAAgB,GAA1B,UACCJ,KAA4B;IAE5B,MAAM,IAAIK,KAAK,CAAC,sDAAsD,CAAC;EACxE,CAAC;EACF,OAAAX,mCAAC;AAAD,CAAC,CAvCiEN,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}