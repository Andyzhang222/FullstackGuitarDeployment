{"ast":null,"code":"import { __asyncGenerator, __await, __generator } from \"tslib\";\nexport function getChunkedStream(source) {\n  var _a;\n  var currentMessageTotalLength = 0;\n  var currentMessagePendingLength = 0;\n  var currentMessage = null;\n  var messageLengthBuffer = null;\n  var allocateMessage = function (size) {\n    if (typeof size !== \"number\") {\n      throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\n    }\n    currentMessageTotalLength = size;\n    currentMessagePendingLength = 4;\n    currentMessage = new Uint8Array(size);\n    var currentMessageView = new DataView(currentMessage.buffer);\n    currentMessageView.setUint32(0, size, false);\n  };\n  var iterator = function () {\n    return __asyncGenerator(this, arguments, function () {\n      var sourceIterator, _a, value, done, chunkLength, currentOffset, bytesRemaining, numBytesForTotal, numBytesToWrite;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            sourceIterator = source[Symbol.asyncIterator]();\n            _b.label = 1;\n          case 1:\n            if (!true) return [3, 16];\n            return [4, __await(sourceIterator.next())];\n          case 2:\n            _a = _b.sent(), value = _a.value, done = _a.done;\n            if (!done) return [3, 10];\n            if (!!currentMessageTotalLength) return [3, 4];\n            return [4, __await(void 0)];\n          case 3:\n            return [2, _b.sent()];\n          case 4:\n            if (!(currentMessageTotalLength === currentMessagePendingLength)) return [3, 7];\n            return [4, __await(currentMessage)];\n          case 5:\n            return [4, _b.sent()];\n          case 6:\n            _b.sent();\n            return [3, 8];\n          case 7:\n            throw new Error(\"Truncated event message received.\");\n          case 8:\n            return [4, __await(void 0)];\n          case 9:\n            return [2, _b.sent()];\n          case 10:\n            chunkLength = value.length;\n            currentOffset = 0;\n            _b.label = 11;\n          case 11:\n            if (!(currentOffset < chunkLength)) return [3, 15];\n            if (!currentMessage) {\n              bytesRemaining = chunkLength - currentOffset;\n              if (!messageLengthBuffer) {\n                messageLengthBuffer = new Uint8Array(4);\n              }\n              numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);\n              messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);\n              currentMessagePendingLength += numBytesForTotal;\n              currentOffset += numBytesForTotal;\n              if (currentMessagePendingLength < 4) {\n                return [3, 15];\n              }\n              allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\n              messageLengthBuffer = null;\n            }\n            numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);\n            currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);\n            currentMessagePendingLength += numBytesToWrite;\n            currentOffset += numBytesToWrite;\n            if (!(currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength)) return [3, 14];\n            return [4, __await(currentMessage)];\n          case 12:\n            return [4, _b.sent()];\n          case 13:\n            _b.sent();\n            currentMessage = null;\n            currentMessageTotalLength = 0;\n            currentMessagePendingLength = 0;\n            _b.label = 14;\n          case 14:\n            return [3, 11];\n          case 15:\n            return [3, 1];\n          case 16:\n            return [2];\n        }\n      });\n    });\n  };\n  return _a = {}, _a[Symbol.asyncIterator] = iterator, _a;\n}","map":{"version":3,"names":["__asyncGenerator","__await","__generator","getChunkedStream","source","_a","currentMessageTotalLength","currentMessagePendingLength","currentMessage","messageLengthBuffer","allocateMessage","size","Error","Uint8Array","currentMessageView","DataView","buffer","setUint32","iterator","arguments","sourceIterator","value","done","chunkLength","currentOffset","bytesRemaining","numBytesForTotal","numBytesToWrite","_b","label","Symbol","asyncIterator","next","sent","length","Math","min","set","slice","getUint32"],"sources":["/Users/andyzhang/Documents/GitHub/Full-stack-project-GuitarSaleWeb/frontend/node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getChunkedStream.js"],"sourcesContent":["import { __asyncGenerator, __await, __generator } from \"tslib\";\nexport function getChunkedStream(source) {\n    var _a;\n    var currentMessageTotalLength = 0;\n    var currentMessagePendingLength = 0;\n    var currentMessage = null;\n    var messageLengthBuffer = null;\n    var allocateMessage = function (size) {\n        if (typeof size !== \"number\") {\n            throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\n        }\n        currentMessageTotalLength = size;\n        currentMessagePendingLength = 4;\n        currentMessage = new Uint8Array(size);\n        var currentMessageView = new DataView(currentMessage.buffer);\n        currentMessageView.setUint32(0, size, false);\n    };\n    var iterator = function () {\n        return __asyncGenerator(this, arguments, function () {\n            var sourceIterator, _a, value, done, chunkLength, currentOffset, bytesRemaining, numBytesForTotal, numBytesToWrite;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        sourceIterator = source[Symbol.asyncIterator]();\n                        _b.label = 1;\n                    case 1:\n                        if (!true) return [3, 16];\n                        return [4, __await(sourceIterator.next())];\n                    case 2:\n                        _a = _b.sent(), value = _a.value, done = _a.done;\n                        if (!done) return [3, 10];\n                        if (!!currentMessageTotalLength) return [3, 4];\n                        return [4, __await(void 0)];\n                    case 3: return [2, _b.sent()];\n                    case 4:\n                        if (!(currentMessageTotalLength === currentMessagePendingLength)) return [3, 7];\n                        return [4, __await(currentMessage)];\n                    case 5: return [4, _b.sent()];\n                    case 6:\n                        _b.sent();\n                        return [3, 8];\n                    case 7: throw new Error(\"Truncated event message received.\");\n                    case 8: return [4, __await(void 0)];\n                    case 9: return [2, _b.sent()];\n                    case 10:\n                        chunkLength = value.length;\n                        currentOffset = 0;\n                        _b.label = 11;\n                    case 11:\n                        if (!(currentOffset < chunkLength)) return [3, 15];\n                        if (!currentMessage) {\n                            bytesRemaining = chunkLength - currentOffset;\n                            if (!messageLengthBuffer) {\n                                messageLengthBuffer = new Uint8Array(4);\n                            }\n                            numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);\n                            messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);\n                            currentMessagePendingLength += numBytesForTotal;\n                            currentOffset += numBytesForTotal;\n                            if (currentMessagePendingLength < 4) {\n                                return [3, 15];\n                            }\n                            allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\n                            messageLengthBuffer = null;\n                        }\n                        numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);\n                        currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);\n                        currentMessagePendingLength += numBytesToWrite;\n                        currentOffset += numBytesToWrite;\n                        if (!(currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength)) return [3, 14];\n                        return [4, __await(currentMessage)];\n                    case 12: return [4, _b.sent()];\n                    case 13:\n                        _b.sent();\n                        currentMessage = null;\n                        currentMessageTotalLength = 0;\n                        currentMessagePendingLength = 0;\n                        _b.label = 14;\n                    case 14: return [3, 11];\n                    case 15: return [3, 1];\n                    case 16: return [2];\n                }\n            });\n        });\n    };\n    return _a = {},\n        _a[Symbol.asyncIterator] = iterator,\n        _a;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}