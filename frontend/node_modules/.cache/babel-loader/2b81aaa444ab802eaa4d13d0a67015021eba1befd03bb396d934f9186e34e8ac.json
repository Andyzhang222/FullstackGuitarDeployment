{"ast":null,"code":"import { __awaiter, __generator, __values } from \"tslib\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\nvar signingKeyCache = {};\nvar cacheQueue = [];\n/**\n * Create a string describing the scope of credentials used to sign a request.\n *\n * @param shortDate The current calendar date in the form YYYYMMDD.\n * @param region    The AWS region in which the service resides.\n * @param service   The service to which the signed request is being sent.\n */\nexport function createScope(shortDate, region, service) {\n  return shortDate + \"/\" + region + \"/\" + service + \"/\" + KEY_TYPE_IDENTIFIER;\n}\n/**\n * Derive a signing key from its composite parts\n *\n * @param sha256Constructor A constructor function that can instantiate SHA-256\n *                          hash objects.\n * @param credentials       The credentials with which the request will be\n *                          signed.\n * @param shortDate         The current calendar date in the form YYYYMMDD.\n * @param region            The AWS region in which the service resides.\n * @param service           The service to which the signed request is being\n *                          sent.\n */\nexport var getSigningKey = function (sha256Constructor, credentials, shortDate, region, service) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;\n    var e_1, _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          return [4 /*yield*/, hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];\n        case 1:\n          credsHash = _d.sent();\n          cacheKey = shortDate + \":\" + region + \":\" + service + \":\" + toHex(credsHash) + \":\" + credentials.sessionToken;\n          if (cacheKey in signingKeyCache) {\n            return [2 /*return*/, signingKeyCache[cacheKey]];\n          }\n          cacheQueue.push(cacheKey);\n          while (cacheQueue.length > MAX_CACHE_SIZE) {\n            delete signingKeyCache[cacheQueue.shift()];\n          }\n          key = \"AWS4\" + credentials.secretAccessKey;\n          _d.label = 2;\n        case 2:\n          _d.trys.push([2, 7, 8, 9]);\n          _a = __values([shortDate, region, service, KEY_TYPE_IDENTIFIER]), _b = _a.next();\n          _d.label = 3;\n        case 3:\n          if (!!_b.done) return [3 /*break*/, 6];\n          signable = _b.value;\n          return [4 /*yield*/, hmac(sha256Constructor, key, signable)];\n        case 4:\n          key = _d.sent();\n          _d.label = 5;\n        case 5:\n          _b = _a.next();\n          return [3 /*break*/, 3];\n        case 6:\n          return [3 /*break*/, 9];\n        case 7:\n          e_1_1 = _d.sent();\n          e_1 = {\n            error: e_1_1\n          };\n          return [3 /*break*/, 9];\n        case 8:\n          try {\n            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n          return [7 /*endfinally*/];\n        case 9:\n          return [2 /*return*/, signingKeyCache[cacheKey] = key];\n      }\n    });\n  });\n};\n/**\n * @internal\n */\nexport function clearCredentialCache() {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach(function (cacheKey) {\n    delete signingKeyCache[cacheKey];\n  });\n}\nfunction hmac(ctor, secret, data) {\n  var hash = new ctor(secret);\n  hash.update(data);\n  return hash.digest();\n}","map":{"version":3,"names":["toHex","KEY_TYPE_IDENTIFIER","MAX_CACHE_SIZE","signingKeyCache","cacheQueue","createScope","shortDate","region","service","getSigningKey","sha256Constructor","credentials","__awaiter","hmac","secretAccessKey","accessKeyId","credsHash","_d","sent","cacheKey","sessionToken","push","length","shift","key","_a","__values","_b","next","signable","value","clearCredentialCache","Object","keys","forEach","ctor","secret","data","hash","update","digest"],"sources":["/Users/andyzhang/Documents/GitHub/Full-stack-project-GuitarSaleWeb/frontend/node_modules/@aws-sdk/middleware-signing/node_modules/@aws-sdk/signature-v4/src/credentialDerivation.ts"],"sourcesContent":["import { Credentials, HashConstructor, SourceData } from \"@aws-sdk/types\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\n\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\n\nconst signingKeyCache: { [key: string]: Uint8Array } = {};\nconst cacheQueue: Array<string> = [];\n\n/**\n * Create a string describing the scope of credentials used to sign a request.\n *\n * @param shortDate The current calendar date in the form YYYYMMDD.\n * @param region    The AWS region in which the service resides.\n * @param service   The service to which the signed request is being sent.\n */\nexport function createScope(shortDate: string, region: string, service: string): string {\n  return `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;\n}\n\n/**\n * Derive a signing key from its composite parts\n *\n * @param sha256Constructor A constructor function that can instantiate SHA-256\n *                          hash objects.\n * @param credentials       The credentials with which the request will be\n *                          signed.\n * @param shortDate         The current calendar date in the form YYYYMMDD.\n * @param region            The AWS region in which the service resides.\n * @param service           The service to which the signed request is being\n *                          sent.\n */\nexport const getSigningKey = async (\n  sha256Constructor: HashConstructor,\n  credentials: Credentials,\n  shortDate: string,\n  region: string,\n  service: string\n): Promise<Uint8Array> => {\n  const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n  const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;\n  if (cacheKey in signingKeyCache) {\n    return signingKeyCache[cacheKey];\n  }\n\n  cacheQueue.push(cacheKey);\n  while (cacheQueue.length > MAX_CACHE_SIZE) {\n    delete signingKeyCache[cacheQueue.shift() as string];\n  }\n\n  let key: SourceData = `AWS4${credentials.secretAccessKey}`;\n  for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\n    key = await hmac(sha256Constructor, key, signable);\n  }\n  return (signingKeyCache[cacheKey] = key as Uint8Array);\n};\n\n/**\n * @internal\n */\nexport function clearCredentialCache(): void {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach((cacheKey) => {\n    delete signingKeyCache[cacheKey];\n  });\n}\n\nfunction hmac(ctor: HashConstructor, secret: SourceData, data: SourceData): Promise<Uint8Array> {\n  const hash = new ctor(secret);\n  hash.update(data);\n  return hash.digest();\n}\n"],"mappings":";AACA,SAASA,KAAK,QAAQ,4BAA4B;AAElD,SAASC,mBAAmB,EAAEC,cAAc,QAAQ,aAAa;AAEjE,IAAMC,eAAe,GAAkC,EAAE;AACzD,IAAMC,UAAU,GAAkB,EAAE;AAEpC;;;;;;;AAOA,OAAM,SAAUC,WAAWA,CAACC,SAAiB,EAAEC,MAAc,EAAEC,OAAe;EAC5E,OAAUF,SAAS,SAAIC,MAAM,SAAIC,OAAO,SAAIP,mBAAqB;AACnE;AAEA;;;;;;;;;;;;AAYA,OAAO,IAAMQ,aAAa,GAAG,SAAAA,CAC3BC,iBAAkC,EAClCC,WAAwB,EACxBL,SAAiB,EACjBC,MAAc,EACdC,OAAe;EAAA,OAAAI,SAAA;;;;;;UAEG,qBAAMC,IAAI,CAACH,iBAAiB,EAAEC,WAAW,CAACG,eAAe,EAAEH,WAAW,CAACI,WAAW,CAAC;;UAA/FC,SAAS,GAAGC,EAAA,CAAAC,IAAA,EAAmF;UAC/FC,QAAQ,GAAMb,SAAS,SAAIC,MAAM,SAAIC,OAAO,SAAIR,KAAK,CAACgB,SAAS,CAAC,SAAIL,WAAW,CAACS,YAAc;UACpG,IAAID,QAAQ,IAAIhB,eAAe,EAAE;YAC/B,sBAAOA,eAAe,CAACgB,QAAQ,CAAC;;UAGlCf,UAAU,CAACiB,IAAI,CAACF,QAAQ,CAAC;UACzB,OAAOf,UAAU,CAACkB,MAAM,GAAGpB,cAAc,EAAE;YACzC,OAAOC,eAAe,CAACC,UAAU,CAACmB,KAAK,EAAY,CAAC;;UAGlDC,GAAG,GAAe,SAAOb,WAAW,CAACG,eAAiB;;;;UACnCW,EAAA,GAAAC,QAAA,EAACpB,SAAS,EAAEC,MAAM,EAAEC,OAAO,EAAEP,mBAAmB,CAAC,GAAA0B,EAAA,GAAAF,EAAA,CAAAG,IAAA;;;;UAA7DC,QAAQ,GAAAF,EAAA,CAAAG,KAAA;UACX,qBAAMjB,IAAI,CAACH,iBAAiB,EAAEc,GAAG,EAAEK,QAAQ,CAAC;;UAAlDL,GAAG,GAAGP,EAAA,CAAAC,IAAA,EAA4C;;;;;;;;;;;;;;;;;;;;;UAEpD,sBAAQf,eAAe,CAACgB,QAAQ,CAAC,GAAGK,GAAiB,CAAC;;;;CACvD;AAED;;;AAGA,OAAM,SAAUO,oBAAoBA,CAAA;EAClC3B,UAAU,CAACkB,MAAM,GAAG,CAAC;EACrBU,MAAM,CAACC,IAAI,CAAC9B,eAAe,CAAC,CAAC+B,OAAO,CAAC,UAACf,QAAQ;IAC5C,OAAOhB,eAAe,CAACgB,QAAQ,CAAC;EAClC,CAAC,CAAC;AACJ;AAEA,SAASN,IAAIA,CAACsB,IAAqB,EAAEC,MAAkB,EAAEC,IAAgB;EACvE,IAAMC,IAAI,GAAG,IAAIH,IAAI,CAACC,MAAM,CAAC;EAC7BE,IAAI,CAACC,MAAM,CAACF,IAAI,CAAC;EACjB,OAAOC,IAAI,CAACE,MAAM,EAAE;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}