{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RecognizeCelebritiesRequest, RecognizeCelebritiesResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1RecognizeCelebritiesCommand, serializeAws_json1_1RecognizeCelebritiesCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns an array of celebrities recognized in the input image.  For more information, see Recognizing Celebrities\n *     in the Amazon Rekognition Developer Guide. </p>\n *          <p>\n *             <code>RecognizeCelebrities</code> returns the 64 largest faces in the image. It lists\n *       recognized celebrities in the <code>CelebrityFaces</code> array and unrecognized faces in the\n *         <code>UnrecognizedFaces</code> array. <code>RecognizeCelebrities</code> doesn't return\n *       celebrities whose faces aren't among the largest 64 faces in the image.</p>\n *\n *          <p>For each celebrity recognized, <code>RecognizeCelebrities</code> returns a\n *         <code>Celebrity</code> object. The <code>Celebrity</code> object contains the celebrity\n *       name, ID, URL links to additional information, match confidence, and a\n *         <code>ComparedFace</code> object that you can use to locate the celebrity's face on the\n *       image.</p>\n *          <p>Amazon Rekognition doesn't retain information about which images a celebrity has been recognized\n *       in. Your application must store this information and use the <code>Celebrity</code> ID\n *       property as a unique identifier for the celebrity. If you don't store the celebrity name or\n *       additional information URLs returned by <code>RecognizeCelebrities</code>, you will need the\n *       ID to identify the celebrity in a call to the <a>GetCelebrityInfo</a>\n *       operation.</p>\n *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n *       image in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *\n *\n *\n *\n *          <p>For an example, see Recognizing Celebrities in an Image in the Amazon Rekognition Developer Guide.</p>\n *          <p>This operation requires permissions to perform the\n *         <code>rekognition:RecognizeCelebrities</code> operation.</p>\n */\nvar RecognizeCelebritiesCommand = /** @class */function (_super) {\n  __extends(RecognizeCelebritiesCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function RecognizeCelebritiesCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  RecognizeCelebritiesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"RecognizeCelebritiesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: RecognizeCelebritiesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: RecognizeCelebritiesResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  RecognizeCelebritiesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1RecognizeCelebritiesCommand(input, context);\n  };\n  RecognizeCelebritiesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1RecognizeCelebritiesCommand(output, context);\n  };\n  return RecognizeCelebritiesCommand;\n}($Command);\nexport { RecognizeCelebritiesCommand };","map":{"version":3,"names":["RecognizeCelebritiesRequest","RecognizeCelebritiesResponse","deserializeAws_json1_1RecognizeCelebritiesCommand","serializeAws_json1_1RecognizeCelebritiesCommand","getSerdePlugin","Command","$Command","RecognizeCelebritiesCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["/Users/andyzhang/Documents/GitHub/Full-stack-project-GuitarSaleWeb/frontend/node_modules/@aws-sdk/client-rekognition/commands/RecognizeCelebritiesCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { RecognizeCelebritiesRequest, RecognizeCelebritiesResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1RecognizeCelebritiesCommand,\n  serializeAws_json1_1RecognizeCelebritiesCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type RecognizeCelebritiesCommandInput = RecognizeCelebritiesRequest;\nexport type RecognizeCelebritiesCommandOutput = RecognizeCelebritiesResponse & __MetadataBearer;\n\n/**\n * <p>Returns an array of celebrities recognized in the input image.  For more information, see Recognizing Celebrities\n *     in the Amazon Rekognition Developer Guide. </p>\n *          <p>\n *             <code>RecognizeCelebrities</code> returns the 64 largest faces in the image. It lists\n *       recognized celebrities in the <code>CelebrityFaces</code> array and unrecognized faces in the\n *         <code>UnrecognizedFaces</code> array. <code>RecognizeCelebrities</code> doesn't return\n *       celebrities whose faces aren't among the largest 64 faces in the image.</p>\n *\n *          <p>For each celebrity recognized, <code>RecognizeCelebrities</code> returns a\n *         <code>Celebrity</code> object. The <code>Celebrity</code> object contains the celebrity\n *       name, ID, URL links to additional information, match confidence, and a\n *         <code>ComparedFace</code> object that you can use to locate the celebrity's face on the\n *       image.</p>\n *          <p>Amazon Rekognition doesn't retain information about which images a celebrity has been recognized\n *       in. Your application must store this information and use the <code>Celebrity</code> ID\n *       property as a unique identifier for the celebrity. If you don't store the celebrity name or\n *       additional information URLs returned by <code>RecognizeCelebrities</code>, you will need the\n *       ID to identify the celebrity in a call to the <a>GetCelebrityInfo</a>\n *       operation.</p>\n *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n *       image in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *\n *\n *\n *\n *          <p>For an example, see Recognizing Celebrities in an Image in the Amazon Rekognition Developer Guide.</p>\n *          <p>This operation requires permissions to perform the\n *         <code>rekognition:RecognizeCelebrities</code> operation.</p>\n */\nexport class RecognizeCelebritiesCommand extends $Command<\n  RecognizeCelebritiesCommandInput,\n  RecognizeCelebritiesCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: RecognizeCelebritiesCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<RecognizeCelebritiesCommandInput, RecognizeCelebritiesCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"RecognizeCelebritiesCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: RecognizeCelebritiesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: RecognizeCelebritiesResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: RecognizeCelebritiesCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1RecognizeCelebritiesCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<RecognizeCelebritiesCommandOutput> {\n    return deserializeAws_json1_1RecognizeCelebritiesCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,2BAA2B,EAAEC,4BAA4B,QAAQ,oBAAoB;AAC9F,SACEC,iDAAiD,EACjDC,+CAA+C,QAC1C,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,IAAAC,2BAAA,0BAAAC,MAAA;EAAiDC,SAAA,CAAAF,2BAAA,EAAAC,MAAA;EAK/C;EACA;EAEA,SAAAD,4BAAqBG,KAAuC;IAA5D,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,2BAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,6BAA6B;IACjD,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,2BAA2B,CAAC6B,kBAAkB;MACvEC,wBAAwB,EAAE7B,4BAA4B,CAAC4B;KACxD;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,2BAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAAuC,EAAEyB,OAAuB;IAChF,OAAOhC,+CAA+C,CAACO,KAAK,EAAEyB,OAAO,CAAC;EACxE,CAAC;EAEO5B,2BAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,iDAAiD,CAACkC,MAAM,EAAED,OAAO,CAAC;EAC3E,CAAC;EAIH,OAAA5B,2BAAC;AAAD,CAAC,CAtDgDD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}