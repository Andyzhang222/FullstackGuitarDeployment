{"ast":null,"code":"/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\n/**\n * Dispatches an event on the passed element.\n * @param {!Element} element The DOM element to dispatch the event on.\n * @param {string} eventType The type of event to dispatch.\n * @param {Object|string=} eventName A string name of the event constructor\n *     to use. Defaults to 'Event' if nothing is passed or 'CustomEvent' if\n *     a value is set on `initDict.detail`. If eventName is given an object\n *     it is assumed to be initDict and thus reassigned.\n * @param {Object=} initDict The initialization attributes for the\n *     event. A `detail` property can be used here to pass custom data.\n * @return {boolean} The return value of `element.dispatchEvent`, which will\n *     be false if any of the event listeners called `preventDefault`.\n */\nexport function dispatch(element, eventType, evtName, init_dict) {\n  if (evtName === void 0) {\n    evtName = 'Event';\n  }\n  if (init_dict === void 0) {\n    init_dict = {};\n  }\n  var event;\n  var isCustom;\n  var initDict = init_dict;\n  var eventName = evtName;\n  // eventName is optional\n  if (typeof eventName === 'object') {\n    initDict = eventName;\n    eventName = 'Event';\n  }\n  initDict['bubbles'] = initDict['bubbles'] || false;\n  initDict['cancelable'] = initDict['cancelable'] || false;\n  initDict['composed'] = initDict['composed'] || false;\n  // If a detail property is passed, this is a custom event.\n  if ('detail' in initDict) isCustom = true;\n  eventName = isCustom ? 'CustomEvent' : eventName;\n  // Tries to create the event using constructors, if that doesn't work,\n  // fallback to `document.createEvent()`.\n  try {\n    event = new window[eventName](eventType, initDict);\n  } catch (err) {\n    event = document.createEvent(eventName);\n    var initMethod = 'init' + (isCustom ? 'Custom' : '') + 'Event';\n    event[initMethod](eventType, initDict['bubbles'], initDict['cancelable'], initDict['detail']);\n  }\n  return element.dispatchEvent(event);\n}","map":{"version":3,"names":["dispatch","element","eventType","evtName","init_dict","event","isCustom","initDict","eventName","window","err","document","createEvent","initMethod","dispatchEvent"],"sources":["/Users/andyzhang/Documents/GitHub/Full-stack-project-GuitarSaleWeb/frontend/node_modules/@aws-amplify/analytics/src/vendor/dom-utils/dispatch.ts"],"sourcesContent":["/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\n\n/**\n * Dispatches an event on the passed element.\n * @param {!Element} element The DOM element to dispatch the event on.\n * @param {string} eventType The type of event to dispatch.\n * @param {Object|string=} eventName A string name of the event constructor\n *     to use. Defaults to 'Event' if nothing is passed or 'CustomEvent' if\n *     a value is set on `initDict.detail`. If eventName is given an object\n *     it is assumed to be initDict and thus reassigned.\n * @param {Object=} initDict The initialization attributes for the\n *     event. A `detail` property can be used here to pass custom data.\n * @return {boolean} The return value of `element.dispatchEvent`, which will\n *     be false if any of the event listeners called `preventDefault`.\n */\nexport function dispatch(\n\telement,\n\teventType,\n\tevtName = 'Event',\n\tinit_dict = {}\n) {\n\tlet event;\n\tlet isCustom;\n\tlet initDict = init_dict;\n\tlet eventName = evtName;\n\n\t// eventName is optional\n\tif (typeof eventName === 'object') {\n\t\tinitDict = eventName;\n\t\teventName = 'Event';\n\t}\n\n\tinitDict['bubbles'] = initDict['bubbles'] || false;\n\tinitDict['cancelable'] = initDict['cancelable'] || false;\n\tinitDict['composed'] = initDict['composed'] || false;\n\n\t// If a detail property is passed, this is a custom event.\n\tif ('detail' in initDict) isCustom = true;\n\teventName = isCustom ? 'CustomEvent' : eventName;\n\n\t// Tries to create the event using constructors, if that doesn't work,\n\t// fallback to `document.createEvent()`.\n\ttry {\n\t\tevent = new window[eventName](eventType, initDict);\n\t} catch (err) {\n\t\tevent = document.createEvent(eventName);\n\t\tconst initMethod = 'init' + (isCustom ? 'Custom' : '') + 'Event';\n\t\tevent[initMethod](\n\t\t\teventType,\n\t\t\tinitDict['bubbles'],\n\t\t\tinitDict['cancelable'],\n\t\t\tinitDict['detail']\n\t\t);\n\t}\n\n\treturn element.dispatchEvent(event);\n}\n"],"mappings":"AAAA;;;AAIA;;;;;;;;;;;;;AAaA,OAAM,SAAUA,QAAQA,CACvBC,OAAO,EACPC,SAAS,EACTC,OAAiB,EACjBC,SAAc;EADd,IAAAD,OAAA;IAAAA,OAAA,UAAiB;EAAA;EACjB,IAAAC,SAAA;IAAAA,SAAA,KAAc;EAAA;EAEd,IAAIC,KAAK;EACT,IAAIC,QAAQ;EACZ,IAAIC,QAAQ,GAAGH,SAAS;EACxB,IAAII,SAAS,GAAGL,OAAO;EAEvB;EACA,IAAI,OAAOK,SAAS,KAAK,QAAQ,EAAE;IAClCD,QAAQ,GAAGC,SAAS;IACpBA,SAAS,GAAG,OAAO;;EAGpBD,QAAQ,CAAC,SAAS,CAAC,GAAGA,QAAQ,CAAC,SAAS,CAAC,IAAI,KAAK;EAClDA,QAAQ,CAAC,YAAY,CAAC,GAAGA,QAAQ,CAAC,YAAY,CAAC,IAAI,KAAK;EACxDA,QAAQ,CAAC,UAAU,CAAC,GAAGA,QAAQ,CAAC,UAAU,CAAC,IAAI,KAAK;EAEpD;EACA,IAAI,QAAQ,IAAIA,QAAQ,EAAED,QAAQ,GAAG,IAAI;EACzCE,SAAS,GAAGF,QAAQ,GAAG,aAAa,GAAGE,SAAS;EAEhD;EACA;EACA,IAAI;IACHH,KAAK,GAAG,IAAII,MAAM,CAACD,SAAS,CAAC,CAACN,SAAS,EAAEK,QAAQ,CAAC;GAClD,CAAC,OAAOG,GAAG,EAAE;IACbL,KAAK,GAAGM,QAAQ,CAACC,WAAW,CAACJ,SAAS,CAAC;IACvC,IAAMK,UAAU,GAAG,MAAM,IAAIP,QAAQ,GAAG,QAAQ,GAAG,EAAE,CAAC,GAAG,OAAO;IAChED,KAAK,CAACQ,UAAU,CAAC,CAChBX,SAAS,EACTK,QAAQ,CAAC,SAAS,CAAC,EACnBA,QAAQ,CAAC,YAAY,CAAC,EACtBA,QAAQ,CAAC,QAAQ,CAAC,CAClB;;EAGF,OAAON,OAAO,CAACa,aAAa,CAACT,KAAK,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}