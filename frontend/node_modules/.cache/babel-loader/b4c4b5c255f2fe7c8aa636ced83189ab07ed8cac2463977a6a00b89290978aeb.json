{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\nvar isEmptyData_1 = require(\"./isEmptyData\");\nvar constants_1 = require(\"./constants\");\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\nvar Sha256 = /** @class */function () {\n  function Sha256(secret) {\n    if (secret) {\n      this.operation = getKeyPromise(secret).then(function (keyData) {\n        return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);\n      });\n      this.operation.catch(function () {});\n    } else {\n      this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest(\"SHA-256\"));\n    }\n  }\n  Sha256.prototype.update = function (toHash) {\n    var _this = this;\n    if ((0, isEmptyData_1.isEmptyData)(toHash)) {\n      return;\n    }\n    this.operation = this.operation.then(function (operation) {\n      operation.onerror = function () {\n        _this.operation = Promise.reject(new Error(\"Error encountered updating hash\"));\n      };\n      operation.process(toArrayBufferView(toHash));\n      return operation;\n    });\n    this.operation.catch(function () {});\n  };\n  Sha256.prototype.digest = function () {\n    return this.operation.then(function (operation) {\n      return new Promise(function (resolve, reject) {\n        operation.onerror = function () {\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n        operation.oncomplete = function () {\n          if (operation.result) {\n            resolve(new Uint8Array(operation.result));\n          }\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n        operation.finish();\n      });\n    });\n  };\n  return Sha256;\n}();\nexports.Sha256 = Sha256;\nfunction getKeyPromise(secret) {\n  return new Promise(function (resolve, reject) {\n    var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey(\"raw\", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]);\n    keyOperation.oncomplete = function () {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n    keyOperation.onerror = function () {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\nfunction toArrayBufferView(data) {\n  if (typeof data === \"string\") {\n    return (0, util_utf8_browser_1.fromUtf8)(data);\n  }\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n  return new Uint8Array(data);\n}","map":{"version":3,"names":["isEmptyData_1","require","constants_1","util_utf8_browser_1","util_locate_window_1","Sha256","secret","operation","getKeyPromise","then","keyData","locateWindow","msCrypto","subtle","sign","SHA_256_HMAC_ALGO","catch","Promise","resolve","digest","prototype","update","toHash","_this","isEmptyData","onerror","reject","Error","process","toArrayBufferView","oncomplete","result","Uint8Array","finish","exports","keyOperation","importKey","data","fromUtf8","ArrayBuffer","isView","buffer","byteOffset","byteLength","BYTES_PER_ELEMENT"],"sources":["/Users/andyzhang/Documents/GitHub/Full-stack-project-GuitarSaleWeb/frontend/node_modules/@aws-crypto/sha256-browser/src/ie11Sha256.ts"],"sourcesContent":["import { isEmptyData } from \"./isEmptyData\";\nimport { SHA_256_HMAC_ALGO } from \"./constants\";\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8-browser\";\nimport { CryptoOperation, Key, MsWindow } from \"@aws-crypto/ie11-detection\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Hash {\n  private operation: Promise<CryptoOperation>;\n\n  constructor(secret?: SourceData) {\n    if (secret) {\n      this.operation = getKeyPromise(secret).then(keyData =>\n        (locateWindow() as MsWindow).msCrypto.subtle.sign(\n          SHA_256_HMAC_ALGO,\n          keyData\n        )\n      );\n      this.operation.catch(() => {});\n    } else {\n      this.operation = Promise.resolve(\n        (locateWindow() as MsWindow).msCrypto.subtle.digest(\"SHA-256\")\n      );\n    }\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash)) {\n      return;\n    }\n\n    this.operation = this.operation.then(operation => {\n      operation.onerror = () => {\n        this.operation = Promise.reject(\n          new Error(\"Error encountered updating hash\")\n        );\n      };\n      operation.process(toArrayBufferView(toHash));\n\n      return operation;\n    });\n    this.operation.catch(() => {});\n  }\n\n  digest(): Promise<Uint8Array> {\n    return this.operation.then<Uint8Array>(\n      operation =>\n        new Promise((resolve, reject) => {\n          operation.onerror = () => {\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n          operation.oncomplete = () => {\n            if (operation.result) {\n              resolve(new Uint8Array(operation.result));\n            }\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n\n          operation.finish();\n        })\n    );\n  }\n}\n\nfunction getKeyPromise(secret: SourceData): Promise<Key> {\n  return new Promise((resolve, reject) => {\n    const keyOperation = (locateWindow() as MsWindow).msCrypto.subtle.importKey(\n      \"raw\",\n      toArrayBufferView(secret),\n      SHA_256_HMAC_ALGO,\n      false,\n      [\"sign\"]\n    );\n\n    keyOperation.oncomplete = () => {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n    keyOperation.onerror = () => {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\n\nfunction toArrayBufferView(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}