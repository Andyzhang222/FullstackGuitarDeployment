{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\nvar util_1 = require(\"@aws-crypto/util\");\nvar constants_1 = require(\"./constants\");\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\nvar Sha256 = /** @class */function () {\n  function Sha256(secret) {\n    this.toHash = new Uint8Array(0);\n    if (secret !== void 0) {\n      this.key = new Promise(function (resolve, reject) {\n        (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey(\"raw\", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]).then(resolve, reject);\n      });\n      this.key.catch(function () {});\n    }\n  }\n  Sha256.prototype.update = function (data) {\n    if ((0, util_1.isEmptyData)(data)) {\n      return;\n    }\n    var update = (0, util_1.convertToBuffer)(data);\n    var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  };\n  Sha256.prototype.digest = function () {\n    var _this = this;\n    if (this.key) {\n      return this.key.then(function (key) {\n        return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function (data) {\n          return new Uint8Array(data);\n        });\n      });\n    }\n    if ((0, util_1.isEmptyData)(this.toHash)) {\n      return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);\n    }\n    return Promise.resolve().then(function () {\n      return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);\n    }).then(function (data) {\n      return Promise.resolve(new Uint8Array(data));\n    });\n  };\n  return Sha256;\n}();\nexports.Sha256 = Sha256;","map":{"version":3,"names":["util_1","require","constants_1","util_locate_window_1","Sha256","secret","toHash","Uint8Array","key","Promise","resolve","reject","locateWindow","crypto","subtle","importKey","convertToBuffer","SHA_256_HMAC_ALGO","then","catch","prototype","update","data","isEmptyData","typedArray","byteLength","set","digest","_this","sign","EMPTY_DATA_SHA_256","SHA_256_HASH","exports"],"sources":["/Users/andyzhang/Documents/GitHub/Full-stack-project-GuitarSaleWeb/frontend/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-crypto/sha256-browser/src/webCryptoSha256.ts"],"sourcesContent":["import { Hash, SourceData } from \"@aws-sdk/types\";\nimport { isEmptyData, convertToBuffer } from \"@aws-crypto/util\";\nimport {\n  EMPTY_DATA_SHA_256,\n  SHA_256_HASH,\n  SHA_256_HMAC_ALGO,\n} from \"./constants\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Hash {\n  private readonly key: Promise<CryptoKey> | undefined;\n  private toHash: Uint8Array = new Uint8Array(0);\n\n  constructor(secret?: SourceData) {\n    if (secret !== void 0) {\n      this.key = new Promise((resolve, reject) => {\n        locateWindow()\n          .crypto.subtle.importKey(\n            \"raw\",\n            convertToBuffer(secret),\n            SHA_256_HMAC_ALGO,\n            false,\n            [\"sign\"]\n          )\n          .then(resolve, reject);\n      });\n      this.key.catch(() => {});\n    }\n  }\n\n  update(data: SourceData): void {\n    if (isEmptyData(data)) {\n      return;\n    }\n\n    const update = convertToBuffer(data);\n    const typedArray = new Uint8Array(\n      this.toHash.byteLength + update.byteLength\n    );\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  }\n\n  digest(): Promise<Uint8Array> {\n    if (this.key) {\n      return this.key.then((key) =>\n        locateWindow()\n          .crypto.subtle.sign(SHA_256_HMAC_ALGO, key, this.toHash)\n          .then((data) => new Uint8Array(data))\n      );\n    }\n\n    if (isEmptyData(this.toHash)) {\n      return Promise.resolve(EMPTY_DATA_SHA_256);\n    }\n\n    return Promise.resolve()\n      .then(() =>\n        locateWindow().crypto.subtle.digest(SHA_256_HASH, this.toHash)\n      )\n      .then((data) => Promise.resolve(new Uint8Array(data)));\n  }\n}\n"],"mappings":";;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AAKA,IAAAE,oBAAA,GAAAF,OAAA;AAEA,IAAAG,MAAA;EAIE,SAAAA,OAAYC,MAAmB;IAFvB,KAAAC,MAAM,GAAe,IAAIC,UAAU,CAAC,CAAC,CAAC;IAG5C,IAAIF,MAAM,KAAK,KAAK,CAAC,EAAE;MACrB,IAAI,CAACG,GAAG,GAAG,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM;QACrC,IAAAR,oBAAA,CAAAS,YAAY,GAAE,CACXC,MAAM,CAACC,MAAM,CAACC,SAAS,CACtB,KAAK,EACL,IAAAf,MAAA,CAAAgB,eAAe,EAACX,MAAM,CAAC,EACvBH,WAAA,CAAAe,iBAAiB,EACjB,KAAK,EACL,CAAC,MAAM,CAAC,CACT,CACAC,IAAI,CAACR,OAAO,EAAEC,MAAM,CAAC;MAC1B,CAAC,CAAC;MACF,IAAI,CAACH,GAAG,CAACW,KAAK,CAAC,aAAO,CAAC,CAAC;;EAE5B;EAEAf,MAAA,CAAAgB,SAAA,CAAAC,MAAM,GAAN,UAAOC,IAAgB;IACrB,IAAI,IAAAtB,MAAA,CAAAuB,WAAW,EAACD,IAAI,CAAC,EAAE;MACrB;;IAGF,IAAMD,MAAM,GAAG,IAAArB,MAAA,CAAAgB,eAAe,EAACM,IAAI,CAAC;IACpC,IAAME,UAAU,GAAG,IAAIjB,UAAU,CAC/B,IAAI,CAACD,MAAM,CAACmB,UAAU,GAAGJ,MAAM,CAACI,UAAU,CAC3C;IACDD,UAAU,CAACE,GAAG,CAAC,IAAI,CAACpB,MAAM,EAAE,CAAC,CAAC;IAC9BkB,UAAU,CAACE,GAAG,CAACL,MAAM,EAAE,IAAI,CAACf,MAAM,CAACmB,UAAU,CAAC;IAC9C,IAAI,CAACnB,MAAM,GAAGkB,UAAU;EAC1B,CAAC;EAEDpB,MAAA,CAAAgB,SAAA,CAAAO,MAAM,GAAN;IAAA,IAAAC,KAAA;IACE,IAAI,IAAI,CAACpB,GAAG,EAAE;MACZ,OAAO,IAAI,CAACA,GAAG,CAACU,IAAI,CAAC,UAACV,GAAG;QACvB,WAAAL,oBAAA,CAAAS,YAAY,GAAE,CACXC,MAAM,CAACC,MAAM,CAACe,IAAI,CAAC3B,WAAA,CAAAe,iBAAiB,EAAET,GAAG,EAAEoB,KAAI,CAACtB,MAAM,CAAC,CACvDY,IAAI,CAAC,UAACI,IAAI;UAAK,WAAIf,UAAU,CAACe,IAAI,CAAC;QAApB,CAAoB,CAAC;MAFvC,CAEuC,CACxC;;IAGH,IAAI,IAAAtB,MAAA,CAAAuB,WAAW,EAAC,IAAI,CAACjB,MAAM,CAAC,EAAE;MAC5B,OAAOG,OAAO,CAACC,OAAO,CAACR,WAAA,CAAA4B,kBAAkB,CAAC;;IAG5C,OAAOrB,OAAO,CAACC,OAAO,EAAE,CACrBQ,IAAI,CAAC;MACJ,WAAAf,oBAAA,CAAAS,YAAY,GAAE,CAACC,MAAM,CAACC,MAAM,CAACa,MAAM,CAACzB,WAAA,CAAA6B,YAAY,EAAEH,KAAI,CAACtB,MAAM,CAAC;IAA9D,CAA8D,CAC/D,CACAY,IAAI,CAAC,UAACI,IAAI;MAAK,OAAAb,OAAO,CAACC,OAAO,CAAC,IAAIH,UAAU,CAACe,IAAI,CAAC,CAAC;IAArC,CAAqC,CAAC;EAC1D,CAAC;EACH,OAAAlB,MAAC;AAAD,CAAC,CAtDD;AAAa4B,OAAA,CAAA5B,MAAA,GAAAA,MAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}