{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ListCollectionsRequest, ListCollectionsResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1ListCollectionsCommand, serializeAws_json1_1ListCollectionsCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns list of collection IDs in your account.\n *     If the result is truncated, the response also provides a <code>NextToken</code>\n *     that you can use in the subsequent request to fetch the next set of collection IDs.</p>\n *\n *          <p>For an example, see Listing Collections in the Amazon Rekognition Developer Guide.</p>\n *          <p>This operation requires permissions to perform the <code>rekognition:ListCollections</code> action.</p>\n */\nvar ListCollectionsCommand = /** @class */function (_super) {\n  __extends(ListCollectionsCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function ListCollectionsCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  ListCollectionsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"ListCollectionsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: ListCollectionsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: ListCollectionsResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  ListCollectionsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1ListCollectionsCommand(input, context);\n  };\n  ListCollectionsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1ListCollectionsCommand(output, context);\n  };\n  return ListCollectionsCommand;\n}($Command);\nexport { ListCollectionsCommand };","map":{"version":3,"names":["ListCollectionsRequest","ListCollectionsResponse","deserializeAws_json1_1ListCollectionsCommand","serializeAws_json1_1ListCollectionsCommand","getSerdePlugin","Command","$Command","ListCollectionsCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["/Users/andyzhang/Documents/GitHub/Full-stack-project-GuitarSaleWeb/frontend/node_modules/@aws-sdk/client-rekognition/commands/ListCollectionsCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { ListCollectionsRequest, ListCollectionsResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1ListCollectionsCommand,\n  serializeAws_json1_1ListCollectionsCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type ListCollectionsCommandInput = ListCollectionsRequest;\nexport type ListCollectionsCommandOutput = ListCollectionsResponse & __MetadataBearer;\n\n/**\n * <p>Returns list of collection IDs in your account.\n *     If the result is truncated, the response also provides a <code>NextToken</code>\n *     that you can use in the subsequent request to fetch the next set of collection IDs.</p>\n *\n *          <p>For an example, see Listing Collections in the Amazon Rekognition Developer Guide.</p>\n *          <p>This operation requires permissions to perform the <code>rekognition:ListCollections</code> action.</p>\n */\nexport class ListCollectionsCommand extends $Command<\n  ListCollectionsCommandInput,\n  ListCollectionsCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: ListCollectionsCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<ListCollectionsCommandInput, ListCollectionsCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"ListCollectionsCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: ListCollectionsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: ListCollectionsResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: ListCollectionsCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1ListCollectionsCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<ListCollectionsCommandOutput> {\n    return deserializeAws_json1_1ListCollectionsCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,sBAAsB,EAAEC,uBAAuB,QAAQ,oBAAoB;AACpF,SACEC,4CAA4C,EAC5CC,0CAA0C,QACrC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;AAQA,IAAAC,sBAAA,0BAAAC,MAAA;EAA4CC,SAAA,CAAAF,sBAAA,EAAAC,MAAA;EAK1C;EACA;EAEA,SAAAD,uBAAqBG,KAAkC;IAAvD,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,sBAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,wBAAwB;IAC5C,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,sBAAsB,CAAC6B,kBAAkB;MAClEC,wBAAwB,EAAE7B,uBAAuB,CAAC4B;KACnD;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,sBAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAAkC,EAAEyB,OAAuB;IAC3E,OAAOhC,0CAA0C,CAACO,KAAK,EAAEyB,OAAO,CAAC;EACnE,CAAC;EAEO5B,sBAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,4CAA4C,CAACkC,MAAM,EAAED,OAAO,CAAC;EACtE,CAAC;EAIH,OAAA5B,sBAAC;AAAD,CAAC,CAtD2CD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}