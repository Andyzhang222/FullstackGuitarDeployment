import { __asyncValues, __awaiter, __generator, __read, __spread, __values } from "tslib";
import { ConsoleLogger as Logger } from '@aws-amplify/core';
import * as idb from 'idb';
import { ModelPredicateCreator } from '../../predicates';
import { isPredicateObj, isPredicateGroup, OpType, QueryOne, } from '../../types';
import { getIndex, getIndexFromAssociation, isModelConstructor, isPrivateMode, traverseModel, validatePredicate, inMemoryPagination, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, isSafariCompatabilityMode, } from '../../util';
var logger = new Logger('DataStore');
var DB_NAME = 'amplify-datastore';
var IndexedDBAdapter = /** @class */ (function () {
    function IndexedDBAdapter() {
        var _this = this;
        this.dbName = DB_NAME;
        this.safariCompatabilityMode = false;
        /**
         * Checks the given path against the browser's IndexedDB implementation for
         * necessary compatibility transformations, applying those transforms if needed.
         *
         * @param `keyArr` strings to compatibilize for browser-indexeddb index operations
         * @returns An array or string, depending on and given key,
         * that is ensured to be compatible with the IndexedDB implementation's nuances.
         */
        this.canonicalKeyPath = function (keyArr) {
            if (_this.safariCompatabilityMode) {
                return keyArr.length > 1 ? keyArr : keyArr[0];
            }
            return keyArr;
        };
    }
    IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {
        var namespace = this.namespaceResolver(modelConstructor);
        var modelName = modelConstructor.name;
        return getStorename(namespace, modelName);
    };
    // Retrieves primary key values from a model
    IndexedDBAdapter.prototype.getIndexKeyValuesFromModel = function (model) {
        var modelConstructor = Object.getPrototypeOf(model)
            .constructor;
        var namespaceName = this.namespaceResolver(modelConstructor);
        var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);
        return extractPrimaryKeyValues(model, keys);
    };
    IndexedDBAdapter.prototype.checkPrivate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isPrivate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, isPrivateMode().then(function (isPrivate) {
                            return isPrivate;
                        })];
                    case 1:
                        isPrivate = _a.sent();
                        if (isPrivate) {
                            logger.error("IndexedDB not supported in this browser's private mode");
                            return [2 /*return*/, Promise.reject("IndexedDB not supported in this browser's private mode")];
                        }
                        else {
                            return [2 /*return*/, Promise.resolve()];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Whether the browser's implementation of IndexedDB is coercing single-field
     * indexes to a scalar key.
     *
     * If this returns `true`, we need to treat indexes containing a single field
     * as scalars.
     *
     * See PR description for reference:
     * https://github.com/aws-amplify/amplify-js/pull/10527
     */
    IndexedDBAdapter.prototype.setSafariCompatabilityMode = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, isSafariCompatabilityMode()];
                    case 1:
                        _a.safariCompatabilityMode = _b.sent();
                        if (this.safariCompatabilityMode === true) {
                            logger.debug('IndexedDB Adapter is running in Safari Compatability Mode');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.getNamespaceAndModelFromStorename = function (storeName) {
        var _a = __read(storeName.split('_')), namespaceName = _a[0], modelNameArr = _a.slice(1);
        return {
            namespaceName: namespaceName,
            modelName: modelNameArr.join('_'),
        };
    };
    IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName, sessionId) {
        return __awaiter(this, void 0, void 0, function () {
            var VERSION, _a, error_1;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.checkPrivate()];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this.setSafariCompatabilityMode()];
                    case 2:
                        _b.sent();
                        if (!!this.initPromise) return [3 /*break*/, 3];
                        this.initPromise = new Promise(function (res, rej) {
                            _this.resolve = res;
                            _this.reject = rej;
                        });
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.initPromise];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        if (sessionId) {
                            this.dbName = DB_NAME + "-" + sessionId;
                        }
                        this.schema = theSchema;
                        this.namespaceResolver = namespaceResolver;
                        this.modelInstanceCreator = modelInstanceCreator;
                        this.getModelConstructorByModelName = getModelConstructorByModelName;
                        _b.label = 6;
                    case 6:
                        _b.trys.push([6, 9, , 10]);
                        if (!!this.db) return [3 /*break*/, 8];
                        VERSION = 3;
                        _a = this;
                        return [4 /*yield*/, idb.openDB(this.dbName, VERSION, {
                                upgrade: function (db, oldVersion, newVersion, txn) { return __awaiter(_this, void 0, void 0, function () {
                                    var _a, _b, storeName, origStore, tmpName, _c, namespaceName, modelName, newStore, cursor, count, e_1_1, error_2;
                                    var e_1, _d;
                                    var _this = this;
                                    return __generator(this, function (_e) {
                                        switch (_e.label) {
                                            case 0:
                                                if (oldVersion === 0) {
                                                    Object.keys(theSchema.namespaces).forEach(function (namespaceName) {
                                                        var namespace = theSchema.namespaces[namespaceName];
                                                        Object.keys(namespace.models).forEach(function (modelName) {
                                                            var storeName = getStorename(namespaceName, modelName);
                                                            _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);
                                                        });
                                                    });
                                                    return [2 /*return*/];
                                                }
                                                if (!((oldVersion === 1 || oldVersion === 2) && newVersion === 3)) return [3 /*break*/, 16];
                                                _e.label = 1;
                                            case 1:
                                                _e.trys.push([1, 14, , 15]);
                                                _e.label = 2;
                                            case 2:
                                                _e.trys.push([2, 11, 12, 13]);
                                                _a = __values(txn.objectStoreNames), _b = _a.next();
                                                _e.label = 3;
                                            case 3:
                                                if (!!_b.done) return [3 /*break*/, 10];
                                                storeName = _b.value;
                                                origStore = txn.objectStore(storeName);
                                                tmpName = "tmp_" + storeName;
                                                origStore.name = tmpName;
                                                _c = this.getNamespaceAndModelFromStorename(storeName), namespaceName = _c.namespaceName, modelName = _c.modelName;
                                                newStore = this.createObjectStoreForModel(db, namespaceName, storeName, modelName);
                                                return [4 /*yield*/, origStore.openCursor()];
                                            case 4:
                                                cursor = _e.sent();
                                                count = 0;
                                                _e.label = 5;
                                            case 5:
                                                if (!(cursor && cursor.value)) return [3 /*break*/, 8];
                                                // we don't pass key, since they are all new entries in the new store
                                                return [4 /*yield*/, newStore.put(cursor.value)];
                                            case 6:
                                                // we don't pass key, since they are all new entries in the new store
                                                _e.sent();
                                                return [4 /*yield*/, cursor.continue()];
                                            case 7:
                                                cursor = _e.sent();
                                                count++;
                                                return [3 /*break*/, 5];
                                            case 8:
                                                // delete original
                                                db.deleteObjectStore(tmpName);
                                                logger.debug(count + " " + storeName + " records migrated");
                                                _e.label = 9;
                                            case 9:
                                                _b = _a.next();
                                                return [3 /*break*/, 3];
                                            case 10: return [3 /*break*/, 13];
                                            case 11:
                                                e_1_1 = _e.sent();
                                                e_1 = { error: e_1_1 };
                                                return [3 /*break*/, 13];
                                            case 12:
                                                try {
                                                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                                                }
                                                finally { if (e_1) throw e_1.error; }
                                                return [7 /*endfinally*/];
                                            case 13:
                                                // add new models created after IndexedDB, but before migration
                                                // this case may happen when a user has not opened an app for
                                                // some time and a new model is added during that time
                                                Object.keys(theSchema.namespaces).forEach(function (namespaceName) {
                                                    var namespace = theSchema.namespaces[namespaceName];
                                                    var objectStoreNames = new Set(txn.objectStoreNames);
                                                    Object.keys(namespace.models)
                                                        .map(function (modelName) {
                                                        return [
                                                            modelName,
                                                            getStorename(namespaceName, modelName),
                                                        ];
                                                    })
                                                        .filter(function (_a) {
                                                        var _b = __read(_a, 2), storeName = _b[1];
                                                        return !objectStoreNames.has(storeName);
                                                    })
                                                        .forEach(function (_a) {
                                                        var _b = __read(_a, 2), modelName = _b[0], storeName = _b[1];
                                                        _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);
                                                    });
                                                });
                                                return [3 /*break*/, 15];
                                            case 14:
                                                error_2 = _e.sent();
                                                logger.error('Error migrating IndexedDB data', error_2);
                                                txn.abort();
                                                throw error_2;
                                            case 15: return [2 /*return*/];
                                            case 16: return [2 /*return*/];
                                        }
                                    });
                                }); },
                            })];
                    case 7:
                        _a.db = _b.sent();
                        this.resolve();
                        _b.label = 8;
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        error_1 = _b.sent();
                        this.reject(error_1);
                        return [3 /*break*/, 10];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    IndexedDBAdapter.prototype._get = function (storeOrStoreName, keyArr) {
        return __awaiter(this, void 0, void 0, function () {
            var index, storeName, store, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof storeOrStoreName === 'string') {
                            storeName = storeOrStoreName;
                            index = this.db.transaction(storeName, 'readonly').store.index('byPk');
                        }
                        else {
                            store = storeOrStoreName;
                            index = store.index('byPk');
                        }
                        return [4 /*yield*/, index.get(this.canonicalKeyPath(keyArr))];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.save = function (model, condition) {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function () {
            var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, tx, store, keyValues, fromDB, predicates, _b, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, store_1, itemKeyValues, fromDB_1, opType, modelKeyValues, key, e_2_1;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.checkPrivate()];
                    case 1:
                        _c.sent();
                        modelConstructor = Object.getPrototypeOf(model)
                            .constructor;
                        storeName = this.getStorenameForModel(modelConstructor);
                        namespaceName = this.namespaceResolver(modelConstructor);
                        connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);
                        set = new Set();
                        connectionStoreNames = Object.values(connectedModels).map(function (_a) {
                            var modelName = _a.modelName, item = _a.item, instance = _a.instance;
                            var storeName = getStorename(namespaceName, modelName);
                            set.add(storeName);
                            var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);
                            return { storeName: storeName, item: item, instance: instance, keys: keys };
                        });
                        tx = this.db.transaction(__spread([storeName], Array.from(set.values())), 'readwrite');
                        store = tx.objectStore(storeName);
                        keyValues = this.getIndexKeyValuesFromModel(model);
                        return [4 /*yield*/, this._get(store, keyValues)];
                    case 2:
                        fromDB = _c.sent();
                        if (condition && fromDB) {
                            predicates = ModelPredicateCreator.getPredicates(condition);
                            _b = predicates || {}, predicateObjs = _b.predicates, type = _b.type;
                            isValid = validatePredicate(fromDB, type, predicateObjs);
                            if (!isValid) {
                                msg = 'Conditional update failed';
                                logger.error(msg, { model: fromDB, condition: predicateObjs });
                                throw new Error(msg);
                            }
                        }
                        result = [];
                        _c.label = 3;
                    case 3:
                        _c.trys.push([3, 11, 12, 17]);
                        connectionStoreNames_1 = __asyncValues(connectionStoreNames);
                        _c.label = 4;
                    case 4: return [4 /*yield*/, connectionStoreNames_1.next()];
                    case 5:
                        if (!(connectionStoreNames_1_1 = _c.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 10];
                        resItem = connectionStoreNames_1_1.value;
                        storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;
                        store_1 = tx.objectStore(storeName_1);
                        itemKeyValues = keys.map(function (key) {
                            var value = item[key];
                            return value;
                        });
                        return [4 /*yield*/, this._get(store_1, itemKeyValues)];
                    case 6:
                        fromDB_1 = _c.sent();
                        opType = fromDB_1 === undefined ? OpType.INSERT : OpType.UPDATE;
                        modelKeyValues = this.getIndexKeyValuesFromModel(model);
                        if (!(keysEqual(itemKeyValues, modelKeyValues) ||
                            opType === OpType.INSERT)) return [3 /*break*/, 9];
                        return [4 /*yield*/, store_1
                                .index('byPk')
                                .getKey(this.canonicalKeyPath(itemKeyValues))];
                    case 7:
                        key = _c.sent();
                        return [4 /*yield*/, store_1.put(item, key)];
                    case 8:
                        _c.sent();
                        result.push([instance, opType]);
                        _c.label = 9;
                    case 9: return [3 /*break*/, 4];
                    case 10: return [3 /*break*/, 17];
                    case 11:
                        e_2_1 = _c.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 17];
                    case 12:
                        _c.trys.push([12, , 15, 16]);
                        if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 14];
                        return [4 /*yield*/, _a.call(connectionStoreNames_1)];
                    case 13:
                        _c.sent();
                        _c.label = 14;
                    case 14: return [3 /*break*/, 16];
                    case 15:
                        if (e_2) throw e_2.error;
                        return [7 /*endfinally*/];
                    case 16: return [7 /*endfinally*/];
                    case 17: return [4 /*yield*/, tx.done];
                    case 18:
                        _c.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {
        return __awaiter(this, void 0, void 0, function () {
            var namespace, relations, connectionStoreNames, modelConstructor;
            var _this = this;
            return __generator(this, function (_a) {
                namespace = this.schema.namespaces[namespaceName];
                relations = namespace.relationships[srcModelName].relationTypes;
                connectionStoreNames = relations.map(function (_a) {
                    var modelName = _a.modelName;
                    return getStorename(namespaceName, modelName);
                });
                modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);
                if (connectionStoreNames.length === 0) {
                    return [2 /*return*/, records.map(function (record) {
                            return _this.modelInstanceCreator(modelConstructor, record);
                        })];
                }
                return [2 /*return*/, records.map(function (record) {
                        return _this.modelInstanceCreator(modelConstructor, record);
                    })];
            });
        });
    };
    IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {
        return __awaiter(this, void 0, void 0, function () {
            var storeName, namespaceName, predicates, keyPath, queryByKey, hasSort, hasPagination, records;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkPrivate()];
                    case 1:
                        _a.sent();
                        storeName = this.getStorenameForModel(modelConstructor);
                        namespaceName = this.namespaceResolver(modelConstructor);
                        predicates = predicate && ModelPredicateCreator.getPredicates(predicate);
                        keyPath = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);
                        queryByKey = predicates && this.keyValueFromPredicate(predicates, keyPath);
                        hasSort = pagination && pagination.sort;
                        hasPagination = pagination && pagination.limit;
                        return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                                var record, filtered, all;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!queryByKey) return [3 /*break*/, 2];
                                            return [4 /*yield*/, this.getByKey(storeName, queryByKey)];
                                        case 1:
                                            record = _a.sent();
                                            return [2 /*return*/, record ? [record] : []];
                                        case 2:
                                            if (!predicates) return [3 /*break*/, 4];
                                            return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];
                                        case 3:
                                            filtered = _a.sent();
                                            return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];
                                        case 4:
                                            if (!hasSort) return [3 /*break*/, 6];
                                            return [4 /*yield*/, this.getAll(storeName)];
                                        case 5:
                                            all = _a.sent();
                                            return [2 /*return*/, this.inMemoryPagination(all, pagination)];
                                        case 6:
                                            if (hasPagination) {
                                                return [2 /*return*/, this.enginePagination(storeName, pagination)];
                                            }
                                            return [2 /*return*/, this.getAll(storeName)];
                                    }
                                });
                            }); })()];
                    case 2:
                        records = (_a.sent());
                        return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.getByKey = function (storeName, keyValue) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._get(storeName, keyValue)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.getAll = function (storeName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.getAll(storeName)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.keyValueFromPredicate = function (predicates, keyPath) {
        var e_3, _a;
        var predicateObjs = predicates.predicates;
        if (predicateObjs.length !== keyPath.length) {
            return;
        }
        var keyValues = [];
        var _loop_1 = function (key) {
            var predicateObj = predicateObjs.find(function (p) { return isPredicateObj(p) && p.field === key && p.operator === 'eq'; });
            predicateObj && keyValues.push(predicateObj.operand);
        };
        try {
            for (var keyPath_1 = __values(keyPath), keyPath_1_1 = keyPath_1.next(); !keyPath_1_1.done; keyPath_1_1 = keyPath_1.next()) {
                var key = keyPath_1_1.value;
                _loop_1(key);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (keyPath_1_1 && !keyPath_1_1.done && (_a = keyPath_1.return)) _a.call(keyPath_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return keyValues.length === keyPath.length ? keyValues : undefined;
    };
    IndexedDBAdapter.prototype.matchingIndex = function (storeName, fieldName, transaction) {
        var e_4, _a;
        var store = transaction.objectStore(storeName);
        try {
            for (var _b = __values(store.indexNames), _c = _b.next(); !_c.done; _c = _b.next()) {
                var name_1 = _c.value;
                var idx = store.index(name_1);
                if (idx.keyPath === fieldName) {
                    return idx;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
    };
    IndexedDBAdapter.prototype.filterOnPredicate = function (storeName, predicates) {
        return __awaiter(this, void 0, void 0, function () {
            var predicateObjs, type, candidateResults, fieldPredicates, txn, predicateIndexes, actualPredicateIndexes, predicateIndex, distinctResults, predicateIndexes_1, predicateIndexes_1_1, predicateIndex, resultGroup, resultGroup_1, resultGroup_1_1, item, e_5_1, filtered;
            var e_5, _a, e_6, _b;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        predicateObjs = predicates.predicates, type = predicates.type;
                        // the predicate objects we care about tend to be nested at least
                        // one level down: `{and: {or: {and: { <the predicates we want> }}}}`
                        // so, we unpack and/or groups until we find a group with more than 1
                        // child OR a child that is not a group (and is therefore a predicate "object").
                        while (predicateObjs.length === 1 && isPredicateGroup(predicateObjs[0])) {
                            type = predicateObjs[0].type;
                            predicateObjs = predicateObjs[0].predicates;
                        }
                        fieldPredicates = predicateObjs.filter(function (p) {
                            return isPredicateObj(p);
                        });
                        txn = this.db.transaction(storeName);
                        predicateIndexes = fieldPredicates.map(function (p) {
                            return {
                                predicate: p,
                                index: _this.matchingIndex(storeName, String(p.field), txn),
                            };
                        });
                        // Explicitly wait for txns from index queries to complete before proceding.
                        // This helps ensure IndexedDB is in a stable, ready state. Else, subseqeuent
                        // qeuries can sometimes appear to deadlock (at least in FakeIndexedDB).
                        return [4 /*yield*/, txn.done];
                    case 1:
                        // Explicitly wait for txns from index queries to complete before proceding.
                        // This helps ensure IndexedDB is in a stable, ready state. Else, subseqeuent
                        // qeuries can sometimes appear to deadlock (at least in FakeIndexedDB).
                        _c.sent();
                        if (!(type === 'and')) return [3 /*break*/, 6];
                        actualPredicateIndexes = predicateIndexes.filter(function (i) { return i.index && i.predicate.operator === 'eq'; });
                        if (!(actualPredicateIndexes.length > 0)) return [3 /*break*/, 3];
                        predicateIndex = actualPredicateIndexes[0];
                        return [4 /*yield*/, predicateIndex.index.getAll(predicateIndex.predicate.operand)];
                    case 2:
                        candidateResults = (_c.sent());
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.getAll(storeName)];
                    case 4:
                        // no usable indexes
                        candidateResults = (_c.sent());
                        _c.label = 5;
                    case 5: return [3 /*break*/, 20];
                    case 6:
                        if (!(type === 'or')) return [3 /*break*/, 18];
                        if (!(predicateIndexes.length > 0 &&
                            predicateIndexes.every(function (i) { return i.index && i.predicate.operator === 'eq'; }))) return [3 /*break*/, 15];
                        distinctResults = new Map();
                        _c.label = 7;
                    case 7:
                        _c.trys.push([7, 12, 13, 14]);
                        predicateIndexes_1 = __values(predicateIndexes), predicateIndexes_1_1 = predicateIndexes_1.next();
                        _c.label = 8;
                    case 8:
                        if (!!predicateIndexes_1_1.done) return [3 /*break*/, 11];
                        predicateIndex = predicateIndexes_1_1.value;
                        return [4 /*yield*/, predicateIndex.index.getAll(predicateIndex.predicate.operand)];
                    case 9:
                        resultGroup = (_c.sent());
                        try {
                            for (resultGroup_1 = (e_6 = void 0, __values(resultGroup)), resultGroup_1_1 = resultGroup_1.next(); !resultGroup_1_1.done; resultGroup_1_1 = resultGroup_1.next()) {
                                item = resultGroup_1_1.value;
                                // TODO: custom PK
                                distinctResults.set(item.id, item);
                            }
                        }
                        catch (e_6_1) { e_6 = { error: e_6_1 }; }
                        finally {
                            try {
                                if (resultGroup_1_1 && !resultGroup_1_1.done && (_b = resultGroup_1.return)) _b.call(resultGroup_1);
                            }
                            finally { if (e_6) throw e_6.error; }
                        }
                        _c.label = 10;
                    case 10:
                        predicateIndexes_1_1 = predicateIndexes_1.next();
                        return [3 /*break*/, 8];
                    case 11: return [3 /*break*/, 14];
                    case 12:
                        e_5_1 = _c.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 14];
                    case 13:
                        try {
                            if (predicateIndexes_1_1 && !predicateIndexes_1_1.done && (_a = predicateIndexes_1.return)) _a.call(predicateIndexes_1);
                        }
                        finally { if (e_5) throw e_5.error; }
                        return [7 /*endfinally*/];
                    case 14:
                        // we could conceivably check for special conditions and return early here.
                        // but, this is simpler and has not yet had a measurable performance impact.
                        candidateResults = Array.from(distinctResults.values());
                        return [3 /*break*/, 17];
                    case 15: return [4 /*yield*/, this.getAll(storeName)];
                    case 16:
                        // either no usable indexes or not all conditions can use one.
                        candidateResults = (_c.sent());
                        _c.label = 17;
                    case 17: return [3 /*break*/, 20];
                    case 18: return [4 /*yield*/, this.getAll(storeName)];
                    case 19:
                        // nothing intelligent we can do with `not` groups unless or until we start
                        // smashing comparison operators against indexes -- at which point we could
                        // perform some reversal here.
                        candidateResults = (_c.sent());
                        _c.label = 20;
                    case 20:
                        filtered = predicateObjs
                            ? candidateResults.filter(function (m) { return validatePredicate(m, type, predicateObjs); })
                            : candidateResults;
                        return [2 /*return*/, filtered];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {
        return inMemoryPagination(records, pagination);
    };
    IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {
        return __awaiter(this, void 0, void 0, function () {
            var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!pagination) return [3 /*break*/, 7];
                        _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;
                        initialRecord = Math.max(0, page * limit) || 0;
                        return [4 /*yield*/, this.db
                                .transaction(storeName)
                                .objectStore(storeName)
                                .openCursor()];
                    case 1:
                        cursor = _c.sent();
                        if (!(cursor && initialRecord > 0)) return [3 /*break*/, 3];
                        return [4 /*yield*/, cursor.advance(initialRecord)];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3:
                        pageResults = [];
                        hasLimit = typeof limit === 'number' && limit > 0;
                        _c.label = 4;
                    case 4:
                        if (!(cursor && cursor.value)) return [3 /*break*/, 6];
                        pageResults.push(cursor.value);
                        if (hasLimit && pageResults.length === limit) {
                            return [3 /*break*/, 6];
                        }
                        return [4 /*yield*/, cursor.continue()];
                    case 5:
                        cursor = _c.sent();
                        return [3 /*break*/, 4];
                    case 6:
                        result = pageResults;
                        return [3 /*break*/, 9];
                    case 7: return [4 /*yield*/, this.db.getAll(storeName)];
                    case 8:
                        result = (_c.sent());
                        _c.label = 9;
                    case 9: return [2 /*return*/, result];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {
        if (firstOrLast === void 0) { firstOrLast = QueryOne.FIRST; }
        return __awaiter(this, void 0, void 0, function () {
            var storeName, cursor, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkPrivate()];
                    case 1:
                        _a.sent();
                        storeName = this.getStorenameForModel(modelConstructor);
                        return [4 /*yield*/, this.db
                                .transaction([storeName], 'readonly')
                                .objectStore(storeName)
                                .openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];
                    case 2:
                        cursor = _a.sent();
                        result = cursor ? cursor.value : undefined;
                        return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {
        return __awaiter(this, void 0, void 0, function () {
            var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, tx, store, keyValues, fromDB, msg, predicates, _a, predicateObjs, type, isValid, msg, relations, relations, deletedModels;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.checkPrivate()];
                    case 1:
                        _b.sent();
                        deleteQueue = [];
                        if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 9];
                        modelConstructor = modelOrModelConstructor;
                        nameSpace = this.namespaceResolver(modelConstructor);
                        storeName = this.getStorenameForModel(modelConstructor);
                        return [4 /*yield*/, this.query(modelConstructor, condition)];
                    case 2:
                        models = _b.sent();
                        relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name]
                            .relationTypes;
                        if (!(condition !== undefined)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];
                    case 3:
                        _b.sent();
                        return [4 /*yield*/, this.deleteItem(deleteQueue)];
                    case 4:
                        _b.sent();
                        deletedModels = deleteQueue.reduce(function (acc, _a) {
                            var items = _a.items;
                            return acc.concat(items);
                        }, []);
                        return [2 /*return*/, [models, deletedModels]];
                    case 5: return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];
                    case 6:
                        _b.sent();
                        // Delete all
                        return [4 /*yield*/, this.db
                                .transaction([storeName], 'readwrite')
                                .objectStore(storeName)
                                .clear()];
                    case 7:
                        // Delete all
                        _b.sent();
                        deletedModels = deleteQueue.reduce(function (acc, _a) {
                            var items = _a.items;
                            return acc.concat(items);
                        }, []);
                        return [2 /*return*/, [models, deletedModels]];
                    case 8: return [3 /*break*/, 17];
                    case 9:
                        model = modelOrModelConstructor;
                        modelConstructor = Object.getPrototypeOf(model)
                            .constructor;
                        namespaceName = this.namespaceResolver(modelConstructor);
                        storeName = this.getStorenameForModel(modelConstructor);
                        if (!condition) return [3 /*break*/, 13];
                        tx = this.db.transaction([storeName], 'readwrite');
                        store = tx.objectStore(storeName);
                        keyValues = this.getIndexKeyValuesFromModel(model);
                        return [4 /*yield*/, this._get(store, keyValues)];
                    case 10:
                        fromDB = _b.sent();
                        if (fromDB === undefined) {
                            msg = 'Model instance not found in storage';
                            logger.warn(msg, { model: model });
                            return [2 /*return*/, [[model], []]];
                        }
                        predicates = ModelPredicateCreator.getPredicates(condition);
                        _a = predicates, predicateObjs = _a.predicates, type = _a.type;
                        isValid = validatePredicate(fromDB, type, predicateObjs);
                        if (!isValid) {
                            msg = 'Conditional update failed';
                            logger.error(msg, { model: fromDB, condition: predicateObjs });
                            throw new Error(msg);
                        }
                        return [4 /*yield*/, tx.done];
                    case 11:
                        _b.sent();
                        relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;
                        return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];
                    case 12:
                        _b.sent();
                        return [3 /*break*/, 15];
                    case 13:
                        relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;
                        return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];
                    case 14:
                        _b.sent();
                        _b.label = 15;
                    case 15: return [4 /*yield*/, this.deleteItem(deleteQueue)];
                    case 16:
                        _b.sent();
                        deletedModels = deleteQueue.reduce(function (acc, _a) {
                            var items = _a.items;
                            return acc.concat(items);
                        }, []);
                        return [2 /*return*/, [[model], deletedModels]];
                    case 17: return [2 /*return*/];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {
        var e_7, _a, e_8, _b;
        return __awaiter(this, void 0, void 0, function () {
            var connectionStoreNames, tx, _c, _d, deleteItem, storeName, items, store, items_1, items_1_1, item, key, keyValues, itemKey, e_8_1, e_7_1;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        connectionStoreNames = deleteQueue.map(function (_a) {
                            var storeName = _a.storeName;
                            return storeName;
                        });
                        tx = this.db.transaction(__spread(connectionStoreNames), 'readwrite');
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 22, 23, 28]);
                        _c = __asyncValues(deleteQueue);
                        _e.label = 2;
                    case 2: return [4 /*yield*/, _c.next()];
                    case 3:
                        if (!(_d = _e.sent(), !_d.done)) return [3 /*break*/, 21];
                        deleteItem = _d.value;
                        storeName = deleteItem.storeName, items = deleteItem.items;
                        store = tx.objectStore(storeName);
                        _e.label = 4;
                    case 4:
                        _e.trys.push([4, 14, 15, 20]);
                        items_1 = __asyncValues(items);
                        _e.label = 5;
                    case 5: return [4 /*yield*/, items_1.next()];
                    case 6:
                        if (!(items_1_1 = _e.sent(), !items_1_1.done)) return [3 /*break*/, 13];
                        item = items_1_1.value;
                        if (!item) return [3 /*break*/, 12];
                        key = void 0;
                        if (!(typeof item === 'object')) return [3 /*break*/, 8];
                        keyValues = this.getIndexKeyValuesFromModel(item);
                        return [4 /*yield*/, store
                                .index('byPk')
                                .getKey(this.canonicalKeyPath(keyValues))];
                    case 7:
                        key = _e.sent();
                        return [3 /*break*/, 10];
                    case 8:
                        itemKey = item.toString();
                        return [4 /*yield*/, store.index('byPk').getKey(itemKey)];
                    case 9:
                        key = _e.sent();
                        _e.label = 10;
                    case 10:
                        if (!(key !== undefined)) return [3 /*break*/, 12];
                        return [4 /*yield*/, store.delete(key)];
                    case 11:
                        _e.sent();
                        _e.label = 12;
                    case 12: return [3 /*break*/, 5];
                    case 13: return [3 /*break*/, 20];
                    case 14:
                        e_8_1 = _e.sent();
                        e_8 = { error: e_8_1 };
                        return [3 /*break*/, 20];
                    case 15:
                        _e.trys.push([15, , 18, 19]);
                        if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 17];
                        return [4 /*yield*/, _b.call(items_1)];
                    case 16:
                        _e.sent();
                        _e.label = 17;
                    case 17: return [3 /*break*/, 19];
                    case 18:
                        if (e_8) throw e_8.error;
                        return [7 /*endfinally*/];
                    case 19: return [7 /*endfinally*/];
                    case 20: return [3 /*break*/, 2];
                    case 21: return [3 /*break*/, 28];
                    case 22:
                        e_7_1 = _e.sent();
                        e_7 = { error: e_7_1 };
                        return [3 /*break*/, 28];
                    case 23:
                        _e.trys.push([23, , 26, 27]);
                        if (!(_d && !_d.done && (_a = _c.return))) return [3 /*break*/, 25];
                        return [4 /*yield*/, _a.call(_c)];
                    case 24:
                        _e.sent();
                        _e.label = 25;
                    case 25: return [3 /*break*/, 27];
                    case 26:
                        if (e_7) throw e_7.error;
                        return [7 /*endfinally*/];
                    case 27: return [7 /*endfinally*/];
                    case 28: return [2 /*return*/];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {
        var relations_1, relations_1_1, models_1, models_1_1, models_2, models_2_1;
        var e_9, _a, e_10, _b, e_11, _c;
        return __awaiter(this, void 0, void 0, function () {
            var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, _d, model, hasOneIndex, values, recordToDelete, index, values, value, recordToDelete, e_10_1, model, index, keyValues, childrenArray, e_11_1, e_9_1;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _e.trys.push([0, 38, 39, 44]);
                        relations_1 = __asyncValues(relations);
                        _e.label = 1;
                    case 1: return [4 /*yield*/, relations_1.next()];
                    case 2:
                        if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 37];
                        rel = relations_1_1.value;
                        relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;
                        storeName = getStorename(nameSpace, modelName);
                        _d = relationType;
                        switch (_d) {
                            case 'HAS_ONE': return [3 /*break*/, 3];
                            case 'HAS_MANY': return [3 /*break*/, 20];
                            case 'BELONGS_TO': return [3 /*break*/, 34];
                        }
                        return [3 /*break*/, 35];
                    case 3:
                        _e.trys.push([3, 13, 14, 19]);
                        models_1 = __asyncValues(models);
                        _e.label = 4;
                    case 4: return [4 /*yield*/, models_1.next()];
                    case 5:
                        if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 12];
                        model = models_1_1.value;
                        hasOneIndex = 'byPk';
                        if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];
                        values = targetNames
                            .filter(function (targetName) { var _a; return (_a = model[targetName]) !== null && _a !== void 0 ? _a : false; })
                            .map(function (targetName) { return model[targetName]; });
                        if (values.length === 0)
                            return [3 /*break*/, 12];
                        return [4 /*yield*/, this.db
                                .transaction(storeName, 'readwrite')
                                .objectStore(storeName)
                                .index(hasOneIndex)
                                .get(this.canonicalKeyPath(values))];
                    case 6:
                        recordToDelete = (_e.sent());
                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]
                                .relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];
                    case 7:
                        _e.sent();
                        return [3 /*break*/, 12];
                    case 8:
                        index = void 0;
                        values = void 0;
                        if (targetName && targetName in model) {
                            index = hasOneIndex;
                            value = model[targetName];
                            values = [value];
                        }
                        else {
                            // backwards compatability for older versions of codegen that did not emit targetName for HAS_ONE relations
                            // TODO: can we deprecate this? it's been ~2 years since codegen started including targetName for HAS_ONE
                            // If we deprecate, we'll need to re-gen the MIPR in __tests__/schema.ts > newSchema
                            // otherwise some unit tests will fail
                            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName]
                                .relationTypes, srcModel);
                            values = this.getIndexKeyValuesFromModel(model);
                        }
                        if (!values || !index)
                            return [3 /*break*/, 12];
                        return [4 /*yield*/, this.db
                                .transaction(storeName, 'readwrite')
                                .objectStore(storeName)
                                .index(index)
                                .get(this.canonicalKeyPath(values))];
                    case 9:
                        recordToDelete = (_e.sent());
                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]
                                .relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];
                    case 10:
                        _e.sent();
                        _e.label = 11;
                    case 11: return [3 /*break*/, 4];
                    case 12: return [3 /*break*/, 19];
                    case 13:
                        e_10_1 = _e.sent();
                        e_10 = { error: e_10_1 };
                        return [3 /*break*/, 19];
                    case 14:
                        _e.trys.push([14, , 17, 18]);
                        if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 16];
                        return [4 /*yield*/, _b.call(models_1)];
                    case 15:
                        _e.sent();
                        _e.label = 16;
                    case 16: return [3 /*break*/, 18];
                    case 17:
                        if (e_10) throw e_10.error;
                        return [7 /*endfinally*/];
                    case 18: return [7 /*endfinally*/];
                    case 19: return [3 /*break*/, 36];
                    case 20:
                        _e.trys.push([20, 27, 28, 33]);
                        models_2 = __asyncValues(models);
                        _e.label = 21;
                    case 21: return [4 /*yield*/, models_2.next()];
                    case 22:
                        if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 26];
                        model = models_2_1.value;
                        index = 
                        // explicit bi-directional @hasMany and @manyToMany
                        getIndex(this.schema.namespaces[nameSpace].relationships[modelName]
                            .relationTypes, srcModel) ||
                            // uni and/or implicit @hasMany
                            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName]
                                .indexes, associatedWith);
                        keyValues = this.getIndexKeyValuesFromModel(model);
                        return [4 /*yield*/, this.db
                                .transaction(storeName, 'readwrite')
                                .objectStore(storeName)
                                .index(index)
                                .getAll(this.canonicalKeyPath(keyValues))];
                    case 23:
                        childrenArray = _e.sent();
                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]
                                .relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];
                    case 24:
                        _e.sent();
                        _e.label = 25;
                    case 25: return [3 /*break*/, 21];
                    case 26: return [3 /*break*/, 33];
                    case 27:
                        e_11_1 = _e.sent();
                        e_11 = { error: e_11_1 };
                        return [3 /*break*/, 33];
                    case 28:
                        _e.trys.push([28, , 31, 32]);
                        if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 30];
                        return [4 /*yield*/, _c.call(models_2)];
                    case 29:
                        _e.sent();
                        _e.label = 30;
                    case 30: return [3 /*break*/, 32];
                    case 31:
                        if (e_11) throw e_11.error;
                        return [7 /*endfinally*/];
                    case 32: return [7 /*endfinally*/];
                    case 33: return [3 /*break*/, 36];
                    case 34: 
                    // Intentionally blank
                    return [3 /*break*/, 36];
                    case 35: throw new Error("Invalid relation type " + relationType);
                    case 36: return [3 /*break*/, 1];
                    case 37: return [3 /*break*/, 44];
                    case 38:
                        e_9_1 = _e.sent();
                        e_9 = { error: e_9_1 };
                        return [3 /*break*/, 44];
                    case 39:
                        _e.trys.push([39, , 42, 43]);
                        if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 41];
                        return [4 /*yield*/, _a.call(relations_1)];
                    case 40:
                        _e.sent();
                        _e.label = 41;
                    case 41: return [3 /*break*/, 43];
                    case 42:
                        if (e_9) throw e_9.error;
                        return [7 /*endfinally*/];
                    case 43: return [7 /*endfinally*/];
                    case 44:
                        deleteQueue.push({
                            storeName: getStorename(nameSpace, srcModel),
                            items: models.map(function (record) {
                                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);
                            }),
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.clear = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.checkPrivate()];
                    case 1:
                        _b.sent();
                        (_a = this.db) === null || _a === void 0 ? void 0 : _a.close();
                        return [4 /*yield*/, idb.deleteDB(this.dbName)];
                    case 2:
                        _b.sent();
                        this.db = undefined;
                        this.initPromise = undefined;
                        return [2 /*return*/];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.batchSave = function (modelConstructor, items) {
        return __awaiter(this, void 0, void 0, function () {
            var result, storeName, txn, store, _loop_2, this_1, items_2, items_2_1, item, e_12_1;
            var e_12, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (items.length === 0) {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, this.checkPrivate()];
                    case 1:
                        _b.sent();
                        result = [];
                        storeName = this.getStorenameForModel(modelConstructor);
                        txn = this.db.transaction(storeName, 'readwrite');
                        store = txn.store;
                        _loop_2 = function (item) {
                            var namespaceName, modelName, model, connectedModels, keyValues, _deleted, index, key, instance;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        namespaceName = this_1.namespaceResolver(modelConstructor);
                                        modelName = modelConstructor.name;
                                        model = this_1.modelInstanceCreator(modelConstructor, item);
                                        connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);
                                        keyValues = this_1.getIndexKeyValuesFromModel(model);
                                        _deleted = item._deleted;
                                        index = store.index('byPk');
                                        return [4 /*yield*/, index.getKey(this_1.canonicalKeyPath(keyValues))];
                                    case 1:
                                        key = _a.sent();
                                        if (!!_deleted) return [3 /*break*/, 3];
                                        instance = connectedModels.find(function (_a) {
                                            var instance = _a.instance;
                                            var instanceKeyValues = _this.getIndexKeyValuesFromModel(instance);
                                            return keysEqual(instanceKeyValues, keyValues);
                                        }).instance;
                                        result.push([
                                            instance,
                                            key ? OpType.UPDATE : OpType.INSERT,
                                        ]);
                                        return [4 /*yield*/, store.put(instance, key)];
                                    case 2:
                                        _a.sent();
                                        return [3 /*break*/, 5];
                                    case 3:
                                        result.push([item, OpType.DELETE]);
                                        if (!key) return [3 /*break*/, 5];
                                        return [4 /*yield*/, store.delete(key)];
                                    case 4:
                                        _a.sent();
                                        _a.label = 5;
                                    case 5: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 7, 8, 9]);
                        items_2 = __values(items), items_2_1 = items_2.next();
                        _b.label = 3;
                    case 3:
                        if (!!items_2_1.done) return [3 /*break*/, 6];
                        item = items_2_1.value;
                        return [5 /*yield**/, _loop_2(item)];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        items_2_1 = items_2.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_12_1 = _b.sent();
                        e_12 = { error: e_12_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);
                        }
                        finally { if (e_12) throw e_12.error; }
                        return [7 /*endfinally*/];
                    case 9: return [4 /*yield*/, txn.done];
                    case 10:
                        _b.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    IndexedDBAdapter.prototype.createObjectStoreForModel = function (db, namespaceName, storeName, modelName) {
        var store = db.createObjectStore(storeName, {
            autoIncrement: true,
        });
        var indexes = this.schema.namespaces[namespaceName].relationships[modelName].indexes;
        indexes.forEach(function (_a) {
            var _b = __read(_a, 3), idxName = _b[0], keyPath = _b[1], options = _b[2];
            store.createIndex(idxName, keyPath, options);
        });
        return store;
    };
    return IndexedDBAdapter;
}());
export default new IndexedDBAdapter();
//# sourceMappingURL=IndexedDBAdapter.js.map